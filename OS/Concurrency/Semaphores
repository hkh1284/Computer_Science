
1. 세마포어의 정의
: 병행성 제어를 위한 자료구조로써, '여러 메소드들로 접근할 수 있는 int값'을 가진 객체이다.

2. 세마포어의 특징
  1) 락, 조건변수로써 사용될 수 있다.
  2) 바이너리 세마포어, 카운팅 세마포어로 나뉜다.
  3) 포괄적이고 다양한 병행성 문제에 활용될 수 있다. ex) 생산자/소비자, 기록자/판독자, 식사하는 철학자

3. 세마포어의 정수값에 접근하는 메소드 대표 3가지
  1) sem_init() : 초기화를 위한 메소드
  2) sem_wait() : 조건이 맞는지 확인. 맞으면 계속 진행, 맞지 않으면 대기하도록 하는 메소드
  3) sem_post() : 대기중인 스레드들이 있으면 깨워주고, 조건이 만족했다는 것을 표시하기 위해 사용되는 메소드


  (1) sem_init(sem_t *sem, int p_shared, unsigned int value)메소드의 인자
    - sem_init()의 첫번째 인자 : 초기화할 세마포어의 포인터를 넣음.
    - sem_init()의 두번째 인자 : 여러 프로세스들이 공유하는지를 나타냄. ex) 0=프로세스 안의 쓰레드들끼리 공유, 1=여러 프로세스들이 공유. 1이면 공유 메모리에 세마포어 변수를 할당 
    - sem_init()의 세번째 인자 : 세마포어가 가지는 초기 값

  (2) sem_wait(sem_t *s)메소드의 인자
    - sem_wait의 인자 : 받은 세마포어의 값이 1 이상이면 그 값을 감소시키고, 즉시 함수를 빠져나감. 0이면 현재 지점에서 작업 대기

  (3) sem_post(sem_t *s)메소드의 인자
    - sem_post의 인자 : 받은 세마포어의 값을 증가시킨다. 만약 이 메소드로 인해 세마포어의 값이 1 이상이 되면 다른 sem_wait()에 의해 대기 중인 프로세스/쓰레드를 깨운다.


4. 바이너리 세마포어와 카운팅 세마포어
  1) 바이너리 세마포어 : 초기값으로 1을 주어 Lock의 형태로 사용한다.
  2) 카운팅 세마포어 : 초기값으로 0을 주어 Condition Variable의 형태로 사용한다.


5. 바이너리 세마포어




6. 카운팅 세마포어




7. 생산자/소비자 문제





8. 기록자/판독자 문제






9. 식사하는 철학자 문제



























